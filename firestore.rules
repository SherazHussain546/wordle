/**
 * @fileOverview Firestore Security Rules for the Wordle game application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and allows public read access to game-related data (daily words and word list).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user.
 * - /users/{userId}/gameStates/{gameStateId}: Stores game states for each user,
 *   accessible only by the user. The gameStateId is a composite of userId and dailyWordDate.
 * - /users/{userId}/statistics: Stores user statistics, accessible only by the user.
 * - /dailyWords/{dailyWordDate}: Stores the daily word, publicly readable.
 * - /wordList/{word}: Stores the valid word list, publicly readable.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Game states are owned by the user and can only be created, updated, or deleted
 *   by the user. The userId is denormalized into the GameState documents to ensure
 *   authorization independence.
 * - Daily words and word list are publicly readable but not writable by clients.
 * - All write operations are explicitly validated against the user's authentication
 *   state.
 *
 * Denormalization for Authorization:
 * - The `GameState` documents contain a denormalized `userId` field. This allows
 *   rules to validate ownership without additional `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user can create their own profile.
     * @allow (get, list, update, delete) Signed-in user can only access their own profile.
     * @deny (create) Signed-in user cannot create a profile with a different userId.
     * @deny (update, delete) Signed-in user cannot modify or delete someone else's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.id == userId;
    }

    /**
     * @description Controls access to game state documents for a specific user.
     * @path /users/{userId}/gameStates/{gameStateId}
     * @allow (create) Signed-in user can create a new game state for themselves.
     * @allow (get, list, update, delete) Signed-in user can only access their own game states.
     * @deny (create) Signed-in user cannot create a game state for a different user.
     * @deny (update, delete) Signed-in user cannot modify or delete someone else's game state.
     * @principle Enforces document ownership for game states.
     */
    match /users/{userId}/gameStates/{gameStateId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isOwner(userId) && resource.data.userId == userId;
    }

    /**
     * @description Controls access to the statistics document for a specific user.
     * @path /users/{userId}/statistics
     * @allow (get, update) Signed-in user can only access their own statistics.
     * @deny (create, delete) Statistics are auto-created and not deleted by clients.
     * @deny (update) Signed-in user cannot modify someone else's statistics.
     * @principle Enforces document ownership for user statistics.
     */
    match /users/{userId}/statistics {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if false;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if false;
    }

    /**
     * @description Controls access to the daily word documents.
     * @path /dailyWords/{dailyWordDate}
     * @allow (get, list) Everyone can read the daily word.
     * @deny (create, update, delete) No one can modify or delete the daily word through the client.  These are managed by trusted server.
     * @principle Allows public read access to daily words.
     */
    match /dailyWords/{dailyWordDate} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the word list documents.
     * @path /wordList/{word}
     * @allow (get, list) Everyone can read the word list.
     * @deny (create, update, delete) No one can modify or delete the word list through the client.  These are managed by trusted server.
     * @principle Allows public read access to the word list.
     */
    match /wordList/{word} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}