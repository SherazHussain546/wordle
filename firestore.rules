/**
 * @file Firestore Security Rules for Wordle Game
 * @core_philosophy This ruleset enforces a strict user-ownership model for user data and game states,
 *  while allowing public read access to the daily word list and word validation list.
 * @data_structure
 *  - /users/{userId}: Stores user profiles, accessible only to the user themselves.
 *  - /users/{userId}/gameStates/{gameStateId}: Stores individual game states, accessible only to the owning user.
 *  - /users/{userId}/statistics: Stores lifetime statistics for a user, accessible only to the user.
 *  - /dailyWords/{dailyWordDate}: Stores daily words; publicly readable.
 *  - /wordList/{word}: Stores a list of valid words; publicly readable.
 * @key_security_decisions
 *  - User listing is disallowed to protect privacy.
 *  - Game states are strictly owned by the user and cannot be accessed by others.
 *  - Daily words and word list are publicly readable to facilitate gameplay.
 * @denormalization_for_authorization The `GameState` documents include `userId` (denormalized),
 *  facilitating rules based on user ownership without requiring `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.  Users can only read and write their own profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile with matching userId.
     * @allow (get) User with ID 'user123' can read their own profile.
     * @allow (update) User with ID 'user123' can update their own profile.
     * @allow (delete) User with ID 'user123' can delete their own profile.
     * @deny (create) User with ID 'user123' cannot create a profile with userId 'user456'.
     * @deny (get) User with ID 'user123' cannot read the profile of user 'user456'.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to game states for a specific user. Only the owning user can manage their game states.
     * @path /users/{userId}/gameStates/{gameStateId}
     * @allow (create) User 'user123' can create a new gameState under their userId.
     * @allow (get) User 'user123' can read their own gameState.
     * @allow (update) User 'user123' can update their own gameState.
     * @allow (delete) User 'user123' can delete their own gameState.
     * @deny (create) User 'user123' cannot create a gameState under userId 'user456'.
     * @deny (get) User 'user123' cannot read gameState of user 'user456'.
     * @principle Enforces document ownership and prevents unauthorized access to game state data.
     */
    match /users/{userId}/gameStates/{gameStateId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user statistics. Only the owning user can read/write their statistics.
     * @path /users/{userId}/statistics
     * @allow (create) User 'user123' can create their statistics document.
     * @allow (get) User 'user123' can read their statistics.
     * @allow (update) User 'user123' can update their statistics.
     * @allow (delete) User 'user123' can delete their statistics.
     * @deny (create) User 'user123' cannot create statistics for user 'user456'.
     * @deny (get) User 'user123' cannot read the statistics of user 'user456'.
     * @principle Enforces document ownership and protects user-specific statistical data.
     */
    match /users/{userId}/statistics {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to daily words, but prevents modification.
     * @path /dailyWords/{dailyWordDate}
     * @allow (get) Any user can read the daily word.
     * @allow (list) Any user can list daily words.
     * @deny (create) No user can create daily words through the client.
     * @deny (update) No user can update daily words through the client.
     * @deny (delete) No user can delete daily words through the client.
     * @principle Provides public read access while restricting write access.
     */
    match /dailyWords/{dailyWordDate} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the word list, but prevents modification.
     * @path /wordList/{word}
     * @allow (get) Any user can read from the word list.
     * @allow (list) Any user can list words.
     * @deny (create) No user can create new words through the client.
     * @deny (update) No user can update words through the client.
     * @deny (delete) No user can delete words through the client.
     * @principle Provides public read access while restricting write access.
     */
    match /wordList/{word} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}