/**
 * @file Firestore Security Rules for Wordle Game
 * @core_philosophy This ruleset enforces a strict user-ownership model for user-specific data while allowing public read access to daily words and word lists.
 * @data_structure
 *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *   - /users/{userId}/gameStates/{gameStateId}: Stores game states, accessible only by the user themselves.
 *   - /users/{userId}/statistics: Stores user statistics, accessible only by the user themselves.
 *   - /dailyWords/{dailyWordDate}: Stores daily words, publicly readable.
 *   - /wordList/{word}: Stores a list of valid words, publicly readable.
 * @key_security_decisions
 *   - Users can only access their own data.
 *   - Daily words and the valid word list are publicly readable.
 *   - Listing of users is disallowed.
 * @denormalization_for_authorization The `GameState` documents include a denormalized `userId`, which eliminates the need for `get()` calls to the `users` collection for authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, get, delete) User with ID 'user123' creates their profile.
     *   - request.auth.uid: 'user123'
     *   - operation: create
     *   - request.resource.data: {id: 'user123', email: 'user123@example.com'}
     * @deny (create, update, get, delete) User with ID 'user456' tries to access profile of 'user123'.
     *   - request.auth.uid: 'user456'
     *   - operation: get
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to game states for a specific user. Only the authenticated user can manage their own game states.
     * @path /users/{userId}/gameStates/{gameStateId}
     * @allow (create, update, get, delete) User with ID 'user123' creates a game state.
     *   - request.auth.uid: 'user123'
     *   - operation: create
     *   - request.resource.data: {userId: 'user123', dailyWordDate: '2024-01-01'}
     * @deny (create, update, get, delete) User with ID 'user456' tries to access a game state of 'user123'.
     *   - request.auth.uid: 'user456'
     *   - operation: get
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/gameStates/{gameStateId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to user statistics. Only the authenticated user can read and write their own statistics.
     * @path /users/{userId}/statistics
     * @allow (create, update, get, delete) User with ID 'user123' creates their statistics.
     *   - request.auth.uid: 'user123'
     *   - operation: create
     *   - request.resource.data: {userId: 'user123'}
     * @deny (create, update, get, delete) User with ID 'user456' tries to access statistics of 'user123'.
     *   - request.auth.uid: 'user456'
     *   - operation: get
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/statistics {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to daily words, but prevents unauthorized creation, updates, and deletions.
     * @path /dailyWords/{dailyWordDate}
     * @allow (get, list) Any user can read the daily word.
     *   - request.auth.uid: null
     *   - operation: get
     * @deny (create, update, delete) User with ID 'user123' tries to create a daily word.
     *   - request.auth.uid: 'user123'
     *   - operation: create
     * @principle Allows public read access while restricting write access.
     */
    match /dailyWords/{dailyWordDate} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Allows public read access to the list of valid words, but prevents unauthorized creation, updates, and deletions.
     * @path /wordList/{word}
     * @allow (get, list) Any user can read the word list.
     *   - request.auth.uid: null
     *   - operation: get
     * @deny (create, update, delete) User with ID 'user123' tries to create a word.
     *   - request.auth.uid: 'user123'
     *   - operation: create
     * @principle Allows public read access while restricting write access.
     */
    match /wordList/{word} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}