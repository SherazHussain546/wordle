/**
 * @file Firestore Security Rules for Wordle Game
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user-specific data (profiles, game states, statistics) and allows public read access to daily words and the word list.
 * @dataStructure
 *   - /users/{userId}: Stores user profiles.
 *   - /users/{userId}/gameStates/{gameStateId}: Stores game states for each user, with denormalized userId for authorization.
 *   - /users/{userId}/statistics: Stores user statistics.
 *   - /dailyWords/{dailyWordDate}: Stores the daily word for a specific date. Publicly readable.
 *   - /wordList/{word}: Stores the list of valid words. Publicly readable.
 * @keySecurityDecisions
 *   - User listing is disallowed.
 *   - Public read access is granted to /dailyWords and /wordList.
 *   - Write access to /dailyWords and /wordList is not defined in this iteration and is set to false.
 * @denormalizationForAuthorization GameState documents contain a denormalized `userId` field to enable ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the owner can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile if request.auth.uid == 'user_abc'.
     * @allow (get) - User with UID 'user_abc' can read their own profile.
     * @allow (update) - User with UID 'user_abc' can update their own profile.
     * @allow (delete) - User with UID 'user_abc' can delete their own profile.
     * @deny (create) - User with UID 'user_def' cannot create a profile for user 'user_abc'.
     * @deny (get) - User with UID 'user_def' cannot read user 'user_abc's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.auth.uid == userId;
      allow update: if isOwner(userId) && resource.data.id == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure game states. Only the owner can read or write their own game states.
     * @path /users/{userId}/gameStates/{gameStateId}
     * @allow (create) - User 'user_abc' can create a game state under their profile.
     * @allow (get) - User 'user_abc' can read a game state under their profile.
     * @allow (update) - User 'user_abc' can update a game state under their profile.
     * @allow (delete) - User 'user_abc' can delete a game state under their profile.
     * @deny (create) - User 'user_def' cannot create a game state for user 'user_abc'.
     * @deny (get) - User 'user_def' cannot read a game state for user 'user_abc'.
     * @principle Enforces document ownership for all operations on game states.
     */
    match /users/{userId}/gameStates/{gameStateId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure user statistics. Only the owner can read or write their own statistics.
     * @path /users/{userId}/statistics
     * @allow (create) - User 'user_abc' can create their statistics document.
     * @allow (get) - User 'user_abc' can read their statistics document.
     * @allow (update) - User 'user_abc' can update their statistics document.
     * @allow (delete) - User 'user_abc' can delete their statistics document.
     * @deny (create) - User 'user_def' cannot create statistics for user 'user_abc'.
     * @deny (get) - User 'user_def' cannot read user 'user_abc's statistics.
     * @principle Enforces document ownership for all operations on user statistics.
     */
    match /users/{userId}/statistics {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isOwner(userId) && resource.data.userId == userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Daily words are publicly readable, but writes are not allowed in this iteration.
     * @path /dailyWords/{dailyWordDate}
     * @allow (get) - Anyone can read the daily word.
     * @allow (list) - Anyone can list the daily words.
     * @deny (create) - No one can create daily words.
     * @deny (update) - No one can update daily words.
     * @deny (delete) - No one can delete daily words.
     * @principle Public read access with restricted writes.
     */
    match /dailyWords/{dailyWordDate} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Word list is publicly readable, but writes are not allowed in this iteration.
     * @path /wordList/{word}
     * @allow (get) - Anyone can read the word list.
     * @allow (list) - Anyone can list the word list.
     * @deny (create) - No one can create words in the list.
     * @deny (update) - No one can update words in the list.
     * @deny (delete) - No one can delete words in the list.
     * @principle Public read access with restricted writes.
     */
    match /wordList/{word} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
  }
}