/**
 * @file Firestore Security Rules for Wordle Game
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles, game states, and statistics.
 * All user-specific data is nested under /users/{userId}, ensuring that only the authenticated user can access their own data.
 * The dailyWords and wordList collections are publicly readable but write-protected.
 * @data_structure
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/gameStates/{gameStateId}: Stores game states for each user.
 * - /users/{userId}/statistics: Stores lifetime statistics for each user.
 * - /dailyWords/{dailyWordDate}: Stores the daily word for a specific date.
 * - /wordList/{word}: Stores a list of valid words.
 * @key_security_decisions
 * - Users can only read/write their own user document and associated game states and statistics.
 * - The dailyWords and wordList collections are publicly readable to facilitate game functionality but write-protected to prevent tampering.
 * - Listing of documents is generally allowed within a user's scope to support game features, but never allowed on top-level collections like `users`.
 * - Data validation is limited to authorization-critical fields to allow for rapid prototyping.
 * @denormalization_for_authorization GameState documents include a denormalized `userId` field to allow for efficient authorization checks without needing to perform additional reads.
 * @structural_segregation Private user data (profiles, game states, statistics) is stored under the /users/{userId} path, while public game data (daily words, word list) is stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user creates their own profile. request.auth.uid == userId
     * @allow (get, update, delete) Authenticated user accesses their own profile. request.auth.uid == userId
     * @deny (create) Non-authenticated user attempts to create a profile.
     * @deny (get, update, delete) Authenticated user attempts to access another user's profile.
     * @deny (list) Listing of users is not permitted.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to game state documents for a specific user.
     * @path /users/{userId}/gameStates/{gameStateId}
     * @allow (create) Authenticated user creates a game state under their profile. request.auth.uid == userId
     * @allow (get, list, update, delete) Authenticated user accesses their own game states. request.auth.uid == userId
     * @deny (create) Non-authenticated user attempts to create a game state.
     * @deny (get, list, update, delete) Authenticated user attempts to access another user's game states.
     * @principle Enforces document ownership for game states.
     */
    match /users/{userId}/gameStates/{gameStateId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to statistics documents for a specific user.
     * @path /users/{userId}/statistics
     * @allow (create) Authenticated user creates their own statistics document. request.auth.uid == userId
     * @allow (get, update, delete) Authenticated user accesses their own statistics document. request.auth.uid == userId
     * @deny (create) Non-authenticated user attempts to create a statistics document.
     * @deny (get, update, delete) Authenticated user attempts to access another user's statistics document.
     * @principle Enforces document ownership for user statistics.
     */
    match /users/{userId}/statistics {
       function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
       function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow get: if isOwner(userId);
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to daily word documents.
     * @path /dailyWords/{dailyWordDate}
     * @allow (get, list) Any user can read the daily word.
     * @deny (create, update, delete) No user can create, update, or delete daily word documents.
     * @principle Public read access for daily words, owner-only (none) writes.
     */
    match /dailyWords/{dailyWordDate} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Controls access to word list documents.
     * @path /wordList/{word}
     * @allow (get, list) Any user can read the word list.
     * @deny (create, update, delete) No user can create, update, or delete word list documents.
     * @principle Public read access for the word list, owner-only (none) writes.
     */
    match /wordList/{word} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }
}