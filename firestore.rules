/**
 * @fileoverview Firestore Security Rules for the Wordle game application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data,
 * while allowing public read access to game-related data (daily words, word lists).
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles; only the authenticated user can read/write their own profile.
 * - /users/{userId}/gameStates/{gameStateId}: Stores game states for each user; only the authenticated user can manage their own game states.
 * - /users/{userId}/statistics: Stores user statistics; only the authenticated user can manage their own statistics.
 * - /dailyWords/{dailyWordDate}: Stores daily words; publicly readable, write access is denied.
 * - /wordList/{word}: Stores a list of valid words; publicly readable, write access is denied.
 *
 * Key Security Decisions:
 * - Users can only access their own data under their respective /users/{userId} path.
 * - Public read access is granted to /dailyWords and /wordList to facilitate gameplay.
 * - No listing of users is allowed.
 *
 * Denormalization for Authorization:
 * - The `GameState` documents denormalize the `userId` to enable ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles. Only the authenticated user can read and write their own profile.
     * @path /users/{userId}
     * @allow (create, update, delete) if request.auth.uid == userId
     * @allow (get, list) if request.auth.uid == userId
     * @deny (create, update, delete) if request.auth.uid != userId
     * @deny (get, list) if request.auth.uid != userId
     * @principle Enforces user ownership for user profile data.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // no listing of users
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);

      /**
       * @description Manages game states for a user. Only the authenticated user can read and write their own game states.
       * @path /users/{userId}/gameStates/{gameStateId}
       * @allow (create, update, delete) if request.auth.uid == userId
       * @allow (get, list) if request.auth.uid == userId
       * @deny (create, update, delete) if request.auth.uid != userId
       * @deny (get, list) if request.auth.uid != userId
       * @principle Enforces user ownership for game state data.
       */
      match /gameStates/{gameStateId} {
        function isOwnerOfGameState(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwnerOfGameState(userId) {
          return isOwnerOfGameState(userId) && resource != null;
        }

        allow get: if isOwnerOfGameState(userId);
        allow list: if isOwnerOfGameState(userId);
        allow create: if isOwnerOfGameState(userId) && request.resource.data.userId == userId;
        allow update: if isExistingOwnerOfGameState(userId) && resource.data.userId == request.resource.data.userId;
        allow delete: if isExistingOwnerOfGameState(userId);
      }

      /**
       * @description Manages user statistics. Only the authenticated user can read and write their own statistics.
       * @path /users/{userId}/statistics
       * @allow (create, update, delete) if request.auth.uid == userId
       * @allow (get, list) if request.auth.uid == userId
       * @deny (create, update, delete) if request.auth.uid != userId
       * @deny (get, list) if request.auth.uid != userId
       * @principle Enforces user ownership for statistics data.
       */
      match /statistics {
        function isOwnerOfStatistics(userId) {
          return request.auth.uid == userId;
        }

        function isExistingOwnerOfStatistics(userId) {
          return isOwnerOfStatistics(userId) && resource != null;
        }

        allow get: if isOwnerOfStatistics(userId);
        allow list: if isOwnerOfStatistics(userId);
        allow create: if isOwnerOfStatistics(userId);
        allow update: if isExistingOwnerOfStatistics(userId) && resource.data.userId == request.resource.data.userId;
        allow delete: if isExistingOwnerOfStatistics(userId);
      }
    }

    /**
     * @description Manages daily words. Publicly readable, but write access is denied to all.
     * @path /dailyWords/{dailyWordDate}
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Allows public read access to daily word data.
     */
    match /dailyWords/{dailyWordDate} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Manages the word list. Publicly readable, but write access is denied to all.
     * @path /wordList/{word}
     * @allow get, list: if true
     * @deny create, update, delete: if false
     * @principle Allows public read access to the word list data.
     */
    match /wordList/{word} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}