/**
 * @description This ruleset enforces a strict user-ownership model for user data and game states,
 *              while allowing public read access to daily words and the word list.
 * @dataStructure
 *   - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 *   - /users/{userId}/gameStates/{gameStateId}: Stores game states, accessible only by the owning user.
 *   - /users/{userId}/statistics: Stores user statistics, accessible only by the user themselves.
 *   - /dailyWords/{dailyWordDate}: Stores daily words, publicly readable.
 *   - /wordList/{word}: Stores a list of valid words, publicly readable.
 * @keySecurityDecisions
 *   - User data is strictly controlled by the user's ID, preventing unauthorized access.
 *   - Game states are owned by the user and stored under their respective user ID.
 *   - Public read access is granted to the daily words and word list to allow the game to function without authentication for read operations.
 *   - Write access to dailyWords is currently open, but should be restricted in a production environment (TODO).
 * @denormalizationForAuthorization The `userId` is denormalized into the `GameState` documents to simplify ownership checks.
 * @structuralSegregation Publicly readable data (dailyWords, wordList) is stored in separate top-level collections,
 *                         while private user data is stored under the /users/{userId} path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own user profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create a document with id 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, or delete the document with id 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a document with id 'user123'.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the document with id 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to manage their own game states.
     * @path /users/{userId}/gameStates/{gameStateId}
     * @allow (create) - User 'user123' can create a new game state under their user ID.
     * @allow (get, list, update, delete) - User 'user123' can read, list, update, and delete their own game states.
     * @deny (create, get, list, update, delete) - User 'user456' cannot access game states under 'user123'.
     * @principle Enforces ownership of game states, preventing cross-user access.
     */
    match /users/{userId}/gameStates/{gameStateId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows a user to read and update their own statistics.
     * @path /users/{userId}/statistics
     * @allow (get, update) - User 'user123' can read and update their own statistics.
     * @deny (get, update) - User 'user456' cannot read or update the statistics of user 'user123'.
     * @principle Restricts access to statistics to the owning user.
     */
    match /users/{userId}/statistics {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to daily words, but restricts write access.
     * @path /dailyWords/{dailyWordDate}
     * @allow (get, list) - Any user can read the daily word.
     * @deny (create, update, delete) - Only authorized users can create, update, or delete the daily word.
     * @principle Provides public access for reading, owner-only for writing.
     */
    match /dailyWords/{dailyWordDate} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to the word list, but restricts write access.
     * @path /wordList/{word}
     * @allow (get, list) - Any user can read a word from the list.
     * @deny (create, update, delete) - No one can create, update, or delete words in the list.
     * @principle Provides public access for reading the word list, but prohibits writing.
     */
    match /wordList/{word} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}